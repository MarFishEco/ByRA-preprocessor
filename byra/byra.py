# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ByRa
                                 A QGIS plugin
 This tool yadda adda yadda
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-04-24
        git sha              : $Format:%H$
        copyright            : (C) 2018 by ByRA
        email                : maxczapanskiy@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QFileDialog
from qgis.gui import QgsMessageBar

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .byra_dialog import ByRaDialog
from .byra_validate import ByRaValidate
from .byra_preprocessor import ByRaPreprocessor
import os.path
import csv
from collections import deque
from PyQt5.QtCore import pyqtRemoveInputHook
import pdb


class ByRa:
  """QGIS Plugin Implementation."""

  def __init__(self, iface):
    """Constructor.
    
    :param iface: An interface instance that will be passed to this class
    which provides the hook by which you can manipulate the QGIS
        application at run time.
    :type iface: QgsInterface
    """
    # Save reference to the QGIS interface
    self.iface = iface
    # initialize plugin directory
    self.plugin_dir = os.path.dirname(__file__)
    # initialize locale
    locale = QSettings().value('locale/userLocale')[0:2]
    locale_path = os.path.join(
      self.plugin_dir,
      'i18n',
      'ByRa_{}.qm'.format(locale))

    if os.path.exists(locale_path):
      self.translator = QTranslator()
      self.translator.load(locale_path)

      if qVersion() > '4.3.3':
        QCoreApplication.installTranslator(self.translator)

    # Create the dialog (after translation) and keep reference
    self.dlg = ByRaDialog()

    # Declare instance attributes
    self.actions = []
    self.menu = self.tr(u'&Bycatch Risk Assessment Toolbox')
    # TODO: We are going to let the user set this up in a future iteration
    self.toolbar = self.iface.addToolBar(u'ByRa')
    self.toolbar.setObjectName(u'ByRa')
    
    # Connect click buttons
    self.dlg.hraButton.clicked.connect(
      lambda s: self.selectFolder(
        self.dlg.hraFolder, 
        "Select HRA folder")
    )
    self.dlg.gearCovButton.clicked.connect(
      lambda s: self.selectFolder(
        self.dlg.gearCovFolder, 
        "Select gear coverage folder")
    )
    self.dlg.mgmtShpButton.clicked.connect(
      lambda s: self.selectFile(
        self.dlg.mgmtShp, 
        "Select management shapefile",
        "*.shp")
    )
    self.dlg.habSuitButton.clicked.connect(
      lambda s: self.selectFolder(
        self.dlg.habSuitFolder, 
        "Select habitat suitability folder")
    )
    self.dlg.outputButton.clicked.connect(
      lambda s: self.selectFolder(
        self.dlg.outputFolder, 
        "Select output folder")
    )

  # noinspection PyMethodMayBeStatic
  def tr(self, message):
    """Get the translation for a string using Qt translation API.

    We implement this ourselves since we do not inherit QObject.

    :param message: String for translation.
    :type message: str, QString

    :returns: Translated version of message.
    :rtype: QString
    """
    # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
    return QCoreApplication.translate('ByRa', message)


  def add_action(
    self,
    icon_path,
    text,
    callback,
    enabled_flag=True,
    add_to_menu=True,
    add_to_toolbar=True,
    status_tip=None,
    whats_this=None,
    parent=None):
    """Add a toolbar icon to the toolbar.

    :param icon_path: Path to the icon for this action. Can be a resource
        path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
    :type icon_path: str

    :param text: Text that should be shown in menu items for this action.
    :type text: str

    :param callback: Function to be called when the action is triggered.
    :type callback: function

    :param enabled_flag: A flag indicating if the action should be enabled
        by default. Defaults to True.
    :type enabled_flag: bool

    :param add_to_menu: Flag indicating whether the action should also
        be added to the menu. Defaults to True.
    :type add_to_menu: bool

    :param add_to_toolbar: Flag indicating whether the action should also
        be added to the toolbar. Defaults to True.
    :type add_to_toolbar: bool

    :param status_tip: Optional text to show in a popup when mouse pointer
        hovers over the action.
    :type status_tip: str

    :param parent: Parent widget for the new action. Defaults None.
    :type parent: QWidget

    :param whats_this: Optional text to show in the status bar when the
        mouse pointer hovers over the action.

    :returns: The action that was created. Note that the action is also
        added to self.actions list.
    :rtype: QAction
    """

    icon = QIcon(icon_path)
    action = QAction(icon, text, parent)
    action.triggered.connect(callback)
    action.setEnabled(enabled_flag)

    if status_tip is not None:
      action.setStatusTip(status_tip)

    if whats_this is not None:
      action.setWhatsThis(whats_this)

    if add_to_toolbar:
      self.toolbar.addAction(action)

    if add_to_menu:
      self.iface.addPluginToMenu(
        self.menu,
        action)

    self.actions.append(action)

    return action

  def initGui(self):
    """Create the menu entries and toolbar icons inside the QGIS GUI."""

    icon_path = ':/plugins/byra/icon.png'
    self.add_action(
      icon_path,
      text=self.tr(u'ByRA'),
      callback=self.run,
      parent=self.iface.mainWindow())


  def unload(self):
    """Removes the plugin menu item and icon from QGIS GUI."""
    for action in self.actions:
      self.iface.removePluginMenu(
        self.tr(u'&Bycatch Risk Assessment Toolbox'), 
        action)
      self.iface.removeToolBarIcon(action)
    # remove the toolbar
    del self.toolbar
  
  def selectFolder(self, _folder, _caption):
    dirname = QFileDialog.getExistingDirectory(self.dlg, _caption)
    _folder.setText(dirname)
  
  def selectFile(self, _file, _caption, _filter):
    filename, _ = QFileDialog.getOpenFileName(self.dlg, 
                                           _caption,
                                           filter = _filter)
    if filename is not None:
      _file.setText(filename)

  def run(self):
    """Run method that performs all the real work"""
    # show the dialog
    self.dlg.show()
    # Run the dialog event loop
    result = self.dlg.exec_()
    # See if OK was pressed
    if result:
      # Run validation
      validator = ByRaValidate(
        self.dlg.hraFolder.text(),
        self.dlg.gearCovFolder.text(),
        0 if self.dlg.extentRadio.isChecked() else 1,
        self.dlg.mgmtShp.text(),
        self.dlg.habSuitFolder.text(),
        self.dlg.intensityChk.isChecked(),
        self.dlg.likInterChk.isChecked(),
        self.dlg.mgmtChk.isChecked(),
        self.dlg.outputFolder.text())
      result = validator.runChecks()
      
      # Create log file
      logReport = open(os.path.join(validator.outputFolder, 'log.txt'), 'w')
      def writeToLog(category, message, messageType):
        if messageType == "SUCCESS":
          messageFun = self.iface.messageBar().pushSuccess
        elif messageType == "CRITICAL":
          messageFun = self.iface.messageBar().pushCritical
        else:
          raise Exception("messageType must be SUCCESS or CRITICAL (not {1})".format(messageType))
          
        messageFun(category, message)
        logReport.write("{0}: ({1}) {2}\n".format(messageType, category, message))        
      
      # Display results of validation
      if result == 'PASS':
        writeToLog(
          "ByRA Validation", 
          "ByRA data validation passed.",
          "SUCCESS")
      ## HRA FOLDER VALIDATION
      elif result == 'NOHRAFOLDER':
        writeToLog(
          "ByRA Validation", 
          "ByRA data validation failed. ByRA Ratings folder does not exist.",
          "CRITICAL")
      elif result == 'NOSRFILES':
        writeToLog(
          "ByRA Validation", 
          "ByRA data validation failed. No species ratings files found in ByRA Ratings folder. Species ratings files must be named [species]_ratings.csv.",
          "CRITICAL")
      elif 'MISSINGGEAR' in result:
        nogear, species = result.split(":")
        writeToLog(
          "ByRA Validation", 
          "ByRA data validation failed. No gears found in species rating file for {}.".format(species),
          "CRITICAL")
      ## GEAR COVERAGE FOLDER VALIDATION 
      elif 'NOGEARSHP' in result:
        nogearshp, species, gear = result.split(":")
        writeToLog(
          "ByRA Validation", 
          "ByRA data validation failed. No shapefile found for gear {}. If this gear should not be included, check rating file for species {}.".format(gear, species),
          "CRITICAL")
      elif 'NOGEARRTG' in result:
        nogearrtg, species, gear = result.split(":")
        writeToLog(
          "ByRA Validation", 
          "ByRA data validation failed. No Rating field found for gear {}. Should gear type be set to Extent?".format(gear),
          "CRITICAL")
      ## HABITAT SUITABILITY FOLDER VALIDATION
      elif 'NOHABSHP' in result:
        nohabshp, species = result.split(":")
        writeToLog(
          "ByRA Validation", 
          "ByRA data validation failed. No habitat suitability shapefile found for species {}.".format(species),
          "CRITICAL")
      elif 'NOHABRTG' in result:
        nohabrtg, species = result.split(":")
        writeToLog(
          "ByRA Validation", 
          "ByRA data validation failed. No Rating field found in habitat suitability shapefile for species {}.".format(species),
          "CRITICAL")
      ## MANAGMENT SHAPEFILE VALIDATION
      elif result == 'NOMGMTSHP':
        writeToLog(
          "ByRA Validation", 
          "ByRA data validation failed. Management shapefile does not exist.",
          "CRITICAL")
      elif result == 'NOMGMTRTG':
        writeToLog(
          "ByRA Validation", 
          "ByRA data validation failed. Management shapefile does not have a Rating field.",
          "CRITICAL")
      ## OTHER VALIDATION CHECKS
      elif result == 'NOOUTPUT':
        writeToLog(
          "ByRA Validation", 
          "ByRA data validation failed. Output folder does not exist.",
          "CRITICAL")
      elif result == 'INTENSITYDENSITY':
        writeToLog(
          "ByRA Validation", 
          "ByRA data validation failed. Gear coverage type must be Density to produce Fishing Intensity output.",
          "CRITICAL")
      elif result == 'LIKINTERDENSITY':
        writeToLog(
          "ByRA Validation", 
          "ByRA data validation failed. Gear coverage type must be Density to produce Likelihood of Interaction output.",
          "CRITICAL")

      # Run preprocessor
      if result == 'PASS':
        byra_preproc = ByRaPreprocessor(validator)
        resultPath = os.path.join(validator.outputFolder, "PreprocessorResults.csv")
      
        # Check if any species/gear/SEC combos failed
        def anyFail(result):
          for species, gears, resultPass in result:
            if not resultPass:
              return True
          return False
          
        allPass = True
      
        if validator.intensity:
          intensityResult = byra_preproc.intensitySEC()
          if anyFail(intensityResult):
            allPass = False
            writeToLog(
              "ByRA Preprocessor", 
              "Failure in ByRA preprocessor, see output at {0}".format(resultPath),
              "CRITICAL")
        if validator.likInter:
          likInterResult = byra_preproc.likInterSEC()
          if anyFail(likInterResult):
            allPass = False
            writeToLog(
              "ByRA Preprocessor", 
              "Failure in ByRA preprocessor, see output at {0}".format(resultPath),
              "CRITICAL")
        if validator.mgmtStatus:
          mgmtResult = byra_preproc.mgmtSEC()
          if anyFail(mgmtResult):
            allPass = False
            writeToLog(
              "ByRA Preprocessor", 
              "Failure in ByRA preprocessor, see output at {0}".format(resultPath),
              "CRITICAL")
        
        if allPass:
          writeToLog(
            "ByRA Preprocessor",
            "ByRA preprocessor passed.",
            "SUCCESS")
      
        # Create CSV of results
        with open(resultPath, "w") as csvfile:
          headers = ['Species', 'Gear']
          if validator.intensity:
            headers.append('FishingIntensity')
            intensityQueue = deque(intensityResult)
          if validator.likInter:
            headers.append('LikelihoodOfInteraction')
            likInterQueue = deque(likInterResult)
          if validator.mgmtStatus:
            headers.append('CurrentStatusOfManagement')
            mgmtQueue = deque(mgmtResult)
          csvwriter = csv.DictWriter(csvfile, headers)
          csvwriter.writeheader()
          for sp in validator.species:
            for g in validator.gear[sp]:
              row = { 'Species' : sp,
                      'Gear' : g }
              if validator.intensity:
                sp, g, intensityPass = intensityQueue.popleft()
                row['FishingIntensity'] = 'PASS' if intensityPass else 'FAIL'
              if validator.likInter:
                sp, g, likInterPass = likInterQueue.popleft()
                row['LikelihoodOfInteraction'] = 'PASS' if likInterPass else 'FAIL'
              if validator.mgmtStatus:
                sp, g, mgmtPass = mgmtQueue.popleft()
                row['CurrentStatusOfManagement'] = 'PASS' if mgmtPass else 'FAIL'
              csvwriter.writerow(row)
              
      logReport.close()
      